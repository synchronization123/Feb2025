<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Engagements Table</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
    }
    table {
      width: 100%;
      border-collapse: collapse;
      margin-bottom: 20px;
    }
    th, td {
      border: 1px solid #ddd;
      padding: 8px;
      text-align: left;
    }
    th {
      background-color: #f4f4f4;
    }
    .filters {
      margin-bottom: 20px;
    }
    .filters input, .filters select {
      margin-right: 10px;
      padding: 5px;
    }
    .pagination {
      margin-top: 20px;
    }
    .pagination button {
      margin-right: 5px;
      padding: 5px 10px;
    }
  </style>
</head>
<body>
  <h1>Engagements Table</h1>
  <div class="filters">
    <input type="text" id="filter-tags" placeholder="Filter by Tags">
    <input type="text" id="filter-name" placeholder="Filter by Name">
    <input type="text" id="filter-description" placeholder="Filter by Description">
    <input type="text" id="filter-version" placeholder="Filter by Version">
    <input type="text" id="filter-lead" placeholder="Filter by Lead">
    <input type="text" id="filter-product" placeholder="Filter by Product">
    <label for="filter-created-start">Created:</label>
    <input type="date" id="filter-created-start">
    <input type="date" id="filter-created-end">
    <label for="filter-updated-start">Updated:</label>
    <input type="date" id="filter-updated-start">
    <input type="date" id="filter-updated-end">
    <button onclick="applyFilters()">Apply Filters</button>
    <button onclick="clearFilters()">Clear Filters</button>
  </div>
  <table id="engagements-table">
    <thead>
      <tr>
        <th>ID</th>
        <th>Tags</th>
        <th>Name</th>
        <th>Description</th>
        <th>Version</th>
        <th>Created</th>
        <th>Status</th>
        <th>Lead</th>
        <th>Product</th>
        <th>Updated</th>
        <th>Notes</th>
        <th>Edit</th>
        <th>Close</th>
        <th>Add Notes</th>
      </tr>
    </thead>
    <tbody>
      <!-- Table rows will be populated here -->
    </tbody>
  </table>
  <div class="pagination">
    <button onclick="goToFirstPage()">First</button>
    <button onclick="goToPreviousPage()">Previous</button>
    <button onclick="goToNextPage()">Next</button>
    <button onclick="goToLastPage()">Last</button>
  </div>

  <script>
    const baseUrl = "https://demo.defectdojo.org/api/v2/engagements";
    let currentPage = 1;
    let totalPages = 1;
    let filters = {};

    // Function to fetch data from the API
    async function fetchData(page = 1) {
      const queryParams = new URLSearchParams({
        ...filters,
        page: page,
        page_size: 10,
      }).toString();

      const response = await fetch(`${baseUrl}?${queryParams}`);
      const data = await response.json();
      return data;
    }

    // Function to populate the table with data
    function populateTable(data) {
      const tbody = document.querySelector("#engagements-table tbody");
      tbody.innerHTML = "";

      data.results.forEach((engagement) => {
        const row = document.createElement("tr");
        row.innerHTML = `
          <td>${engagement.id}</td>
          <td>${engagement.tags.join(", ")}</td>
          <td>${engagement.name}</td>
          <td>${engagement.description}</td>
          <td>${engagement.version}</td>
          <td>${engagement.created}</td>
          <td>${engagement.status}</td>
          <td>${engagement.lead}</td>
          <td>${engagement.product}</td>
          <td>${engagement.updated}</td>
          <td>${engagement.notes}</td>
          <td><button onclick="editEngagement(${engagement.id})">Edit</button></td>
          <td><button onclick="closeEngagement(${engagement.id})">Close</button></td>
          <td><button onclick="addNotes(${engagement.id})">Add Notes</button></td>
        `;
        tbody.appendChild(row);
      });

      totalPages = Math.ceil(data.count / 10);
      updatePagination();
    }

    // Function to apply filters
    function applyFilters() {
      filters = {
        tags: document.getElementById("filter-tags").value,
        name: document.getElementById("filter-name").value,
        description: document.getElementById("filter-description").value,
        version: document.getElementById("filter-version").value,
        lead: document.getElementById("filter-lead").value,
        product: document.getElementById("filter-product").value,
        created__gte: document.getElementById("filter-created-start").value,
        created__lte: document.getElementById("filter-created-end").value,
        updated__gte: document.getElementById("filter-updated-start").value,
        updated__lte: document.getElementById("filter-updated-end").value,
      };

      currentPage = 1;
      fetchData(currentPage).then(populateTable);
    }

    // Function to clear filters
    function clearFilters() {
      document.getElementById("filter-tags").value = "";
      document.getElementById("filter-name").value = "";
      document.getElementById("filter-description").value = "";
      document.getElementById("filter-version").value = "";
      document.getElementById("filter-lead").value = "";
      document.getElementById("filter-product").value = "";
      document.getElementById("filter-created-start").value = "";
      document.getElementById("filter-created-end").value = "";
      document.getElementById("filter-updated-start").value = "";
      document.getElementById("filter-updated-end").value = "";

      filters = {};
      currentPage = 1;
      fetchData(currentPage).then(populateTable);
    }

    // Pagination functions
    function goToFirstPage() {
      currentPage = 1;
      fetchData(currentPage).then(populateTable);
    }

    function goToPreviousPage() {
      if (currentPage > 1) {
        currentPage--;
        fetchData(currentPage).then(populateTable);
      }
    }

    function goToNextPage() {
      if (currentPage < totalPages) {
        currentPage++;
        fetchData(currentPage).then(populateTable);
      }
    }

    function goToLastPage() {
      currentPage = totalPages;
      fetchData(currentPage).then(populateTable);
    }

    function updatePagination() {
      console.log(`Page ${currentPage} of ${totalPages}`);
    }

    // Refresh table data every 11 minutes
    setInterval(() => {
      fetchData(currentPage).then(populateTable);
    }, 11 * 60 * 1000);

    // Initial data fetch
    fetchData(currentPage).then(populateTable);
  </script>
</body>
</html>