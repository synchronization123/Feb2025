<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Engagements Table</title>

    <!-- Bootstrap 5 -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <style>
        body {
            background-color: #f8f9fa;
        }
        .container {
            max-width: 100%;
            margin: auto;
            background: white;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
        }
        table {
            width: 100%;
            margin-top: 10px;
        }
        th {
            background-color: #007bff;
            color: white;
            text-align: center;
        }
    </style>
</head>
<body>

<div class="container mt-4">
    <h2 class="text-center mb-3">Engagements Table</h2>

    <!-- Filters -->
    <div class="row g-2 mb-3">
        <div class="col-md-3">
            <select id="filterTags" class="form-select" onchange="applyFilters()">
                <option value="">Select Tag</option>
            </select>
        </div>
        <div class="col-md-3">
            <select id="filterStatus" class="form-select" onchange="applyFilters()">
                <option value="">Select Status</option>
            </select>
        </div>
        <div class="col-md-3">
            <select id="filterLead" class="form-select" onchange="applyFilters()">
                <option value="">Select Lead</option>
            </select>
        </div>
        <div class="col-md-3">
            <select id="filterProduct" class="form-select" onchange="applyFilters()">
                <option value="">Select Product</option>
            </select>
        </div>
    </div>

    <div class="row g-2 mb-3">
        <div class="col-md-3">
            <input type="date" id="filterCreatedFrom" class="form-control" onchange="applyFilters()">
        </div>
        <div class="col-md-3">
            <input type="date" id="filterCreatedTo" class="form-control" onchange="applyFilters()">
        </div>
        <div class="col-md-3">
            <input type="date" id="filterUpdatedFrom" class="form-control" onchange="applyFilters()">
        </div>
        <div class="col-md-3">
            <input type="date" id="filterUpdatedTo" class="form-control" onchange="applyFilters()">
        </div>
    </div>

    <div class="text-center mb-3">
        <button class="btn btn-secondary" onclick="clearFilters()">Clear All</button>
    </div>

    <!-- Table -->
    <div class="table-responsive">
        <table class="table table-bordered table-striped">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Tags</th>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Version</th>
                    <th>Created</th>
                    <th>Status</th>
                    <th>Lead</th>
                    <th>Product</th>
                    <th>Updated</th>
                    <th>Notes</th>
                </tr>
            </thead>
            <tbody id="tableBody"></tbody>
        </table>
    </div>

    <!-- Pagination -->
    <div class="text-center mt-3">
        <button class="btn btn-outline-primary" onclick="firstPage()">First</button>
        <button class="btn btn-outline-primary" onclick="prevPage()">Previous</button>
        <span id="pageInfo" class="mx-2"></span>
        <button class="btn btn-outline-primary" onclick="nextPage()">Next</button>
        <button class="btn btn-outline-primary" onclick="lastPage()">Last</button>
    </div>
</div>

<script>
    const baseUrl = "https://demo.defectdojo.org/api/v2/engagements/?o=-ordering";
    let currentPage = 1, totalPages = 1;
    let allTags = new Set(), allStatuses = new Set(), allLeads = new Set(), allProducts = new Set();

    function fetchData() {
        let url = `${baseUrl}&limit=50&page=${currentPage}`;
        fetch(url)
            .then(response => response.json())
            .then(data => {
                if (data.results) {
                    updateFilters(data.results);
                    renderTable(data.results);
                    totalPages = Math.ceil(data.count / 50);
                    document.getElementById("pageInfo").innerText = `Page ${currentPage} of ${totalPages}`;
                }
            })
            .catch(error => console.error("Error fetching data:", error));
    }

    function updateFilters(results) {
        results.forEach(item => {
            item.tags?.forEach(tag => allTags.add(tag));
            if (item.status) allStatuses.add(item.status);
            if (item.lead) allLeads.add(item.lead);
            if (item.product) allProducts.add(item.product);
        });

        populateDropdown("filterTags", allTags);
        populateDropdown("filterStatus", allStatuses);
        populateDropdown("filterLead", allLeads);
        populateDropdown("filterProduct", allProducts);
    }

    function populateDropdown(id, dataSet) {
        let dropdown = document.getElementById(id);
        dropdown.innerHTML = `<option value="">Select</option>`;
        dataSet.forEach(value => {
            let option = document.createElement("option");
            option.value = value;
            option.textContent = value;
            dropdown.appendChild(option);
        });
    }

    function renderTable(engagements) {
        const tbody = document.getElementById("tableBody");
        tbody.innerHTML = "";
        engagements.forEach(item => {
            tbody.innerHTML += `<tr>
                <td>${item.id}</td>
                <td>${item.tags?.join(", ") || ""}</td>
                <td>${item.name || ""}</td>
                <td>${item.description || ""}</td>
                <td>${item.version || ""}</td>
                <td>${formatDate(item.created)}</td>
                <td>${item.status || ""}</td>
                <td>${item.lead || ""}</td>
                <td>${item.product || ""}</td>
                <td>${formatDate(item.updated)}</td>
                <td>${item.notes || "N/A"}</td>
            </tr>`;
        });
    }

    function formatDate(date) { return date ? new Date(date).toISOString().split('T')[0] : ""; }

    function firstPage() { currentPage = 1; fetchData(); }
    function prevPage() { if (currentPage > 1) currentPage--; fetchData(); }
    function nextPage() { if (currentPage < totalPages) currentPage++; fetchData(); }
    function lastPage() { currentPage = totalPages; fetchData(); }

    function applyFilters() { fetchData(); }
    function clearFilters() { document.querySelectorAll("select, input").forEach(input => input.value = ""); fetchData(); }

    fetchData();
</script>

</body>
</html>