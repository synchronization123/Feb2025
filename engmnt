<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Engagements Table</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 10px;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: #f4f4f4;
        }
        .filter-container {
            margin-bottom: 10px;
        }
        input, button {
            margin-right: 5px;
            padding: 5px;
        }
        .pagination {
            margin-top: 10px;
        }
    </style>
</head>
<body>

    <h2>Engagements Table</h2>

    <div class="filter-container">
        <input type="text" id="filterTags" placeholder="Filter by Tags">
        <input type="text" id="filterName" placeholder="Filter by Name">
        <input type="text" id="filterDescription" placeholder="Filter by Description">
        <input type="text" id="filterVersion" placeholder="Filter by Version">
        <input type="text" id="filterLead" placeholder="Filter by Lead">
        <input type="text" id="filterProduct" placeholder="Filter by Product">
        <input type="date" id="filterCreatedFrom"> to 
        <input type="date" id="filterCreatedTo">
        <input type="date" id="filterUpdatedFrom"> to 
        <input type="date" id="filterUpdatedTo">
        <button onclick="applyFilters()">Apply Filters</button>
        <button onclick="clearFilters()">Clear All</button>
    </div>

    <table>
        <thead>
            <tr>
                <th>ID</th>
                <th>Tags</th>
                <th>Name</th>
                <th>Description</th>
                <th>Version</th>
                <th>Created</th>
                <th>Status</th>
                <th>Lead</th>
                <th>Product</th>
                <th>Updated</th>
                <th>Notes</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody id="tableBody">
            <!-- Data will be inserted here -->
        </tbody>
    </table>

    <div class="pagination">
        <button onclick="firstPage()">First</button>
        <button onclick="prevPage()">Previous</button>
        <span id="pageInfo"></span>
        <button onclick="nextPage()">Next</button>
        <button onclick="lastPage()">Last</button>
    </div>

    <script>
        const baseUrl = "https://demo.defectdojo.org/api/v2/engagements";
        let currentPage = 1, totalPages = 1, engagements = [];

        function fetchData() {
            fetch(`${baseUrl}?limit=10&page=${currentPage}`)
                .then(response => response.json())
                .then(data => {
                    engagements = data.results || [];
                    totalPages = Math.ceil(data.count / 10);
                    renderTable();
                })
                .catch(error => console.error("Error fetching data:", error));
        }

        function renderTable() {
            const tbody = document.getElementById("tableBody");
            tbody.innerHTML = "";
            engagements.forEach(item => {
                let row = `<tr>
                    <td>${item.id}</td>
                    <td>${item.tags.join(", ")}</td>
                    <td>${item.name}</td>
                    <td>${item.description}</td>
                    <td>${item.version}</td>
                    <td>${item.created}</td>
                    <td>${item.status}</td>
                    <td>${item.lead}</td>
                    <td>${item.product}</td>
                    <td>${item.updated}</td>
                    <td>${item.notes || "N/A"}</td>
                    <td>
                        <button onclick="editEngagement(${item.id})">Edit</button>
                        <button onclick="closeEngagement(${item.id})">Close</button>
                        <button onclick="addNotes(${item.id})">Add Notes</button>
                    </td>
                </tr>`;
                tbody.innerHTML += row;
            });
            document.getElementById("pageInfo").innerText = `Page ${currentPage} of ${totalPages}`;
        }

        function applyFilters() {
            let tags = document.getElementById("filterTags").value.toLowerCase();
            let name = document.getElementById("filterName").value.toLowerCase();
            let description = document.getElementById("filterDescription").value.toLowerCase();
            let version = document.getElementById("filterVersion").value.toLowerCase();
            let lead = document.getElementById("filterLead").value.toLowerCase();
            let product = document.getElementById("filterProduct").value.toLowerCase();
            let createdFrom = document.getElementById("filterCreatedFrom").value;
            let createdTo = document.getElementById("filterCreatedTo").value;
            let updatedFrom = document.getElementById("filterUpdatedFrom").value;
            let updatedTo = document.getElementById("filterUpdatedTo").value;

            let filteredData = engagements.filter(item => {
                return (!tags || item.tags.join(", ").toLowerCase().includes(tags)) &&
                       (!name || item.name.toLowerCase().includes(name)) &&
                       (!description || item.description.toLowerCase().includes(description)) &&
                       (!version || item.version.toLowerCase().includes(version)) &&
                       (!lead || item.lead.toLowerCase().includes(lead)) &&
                       (!product || item.product.toLowerCase().includes(product)) &&
                       (!createdFrom || new Date(item.created) >= new Date(createdFrom)) &&
                       (!createdTo || new Date(item.created) <= new Date(createdTo)) &&
                       (!updatedFrom || new Date(item.updated) >= new Date(updatedFrom)) &&
                       (!updatedTo || new Date(item.updated) <= new Date(updatedTo));
            });

            engagements = filteredData;
            renderTable();
        }

        function clearFilters() {
            document.querySelectorAll(".filter-container input").forEach(input => input.value = "");
            fetchData();
        }

        function firstPage() {
            if (currentPage > 1) {
                currentPage = 1;
                fetchData();
            }
        }

        function prevPage() {
            if (currentPage > 1) {
                currentPage--;
                fetchData();
            }
        }

        function nextPage() {
            if (currentPage < totalPages) {
                currentPage++;
                fetchData();
            }
        }

        function lastPage() {
            if (currentPage < totalPages) {
                currentPage = totalPages;
                fetchData();
            }
        }

        function editEngagement(id) {
            alert(`Edit engagement ID: ${id}`);
        }

        function closeEngagement(id) {
            alert(`Close engagement ID: ${id}`);
        }

        function addNotes(id) {
            alert(`Add notes to engagement ID: ${id}`);
        }

        setInterval(fetchData, 11 * 60 * 1000); // Auto-refresh every 11 minutes
        fetchData(); // Initial load
    </script>

</body>
</html>