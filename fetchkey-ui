import tkinter as tk
from tkinter import scrolledtext, messagebox
import requests

# API Details
DEFECTDOJO_ENGAGEMENTS_URL = "https://demo.defectdojo.org/api/v2/engagements/"
API_TOKEN = "548afd6fab3bea9794a41b31da0e9404f733e222"
HEADERS_DEFECTDOJO = {
    'Authorization': f'Token {API_TOKEN}',
    'Content-Type': 'application/json'
}

# Function to fetch engagement details
def get_engagement_details(engagement_id):
    url = f"{DEFECTDOJO_ENGAGEMENTS_URL}{engagement_id}/"
    response = requests.get(url, headers=HEADERS_DEFECTDOJO)
    if response.status_code != 200:
        log_message(f"❌ Error fetching engagement {engagement_id}: {response.text}")
        return None
    return response.json()

# Function to create a test in DefectDojo dynamically
def create_test():
    engagement_id = engagement_id_entry.get().strip()
    description = description_text.get("1.0", tk.END).strip()

    if not engagement_id or not description:
        messagebox.showwarning("Missing Input", "Please enter Engagement ID and Description.")
        return

    # Fetch engagement details dynamically
    engagement_data = get_engagement_details(engagement_id)
    if not engagement_data:
        return

    # Prepare test data dynamically based on engagement details
    test_data = {
        "engagement": int(engagement_id),
        "scan_type": engagement_data.get("scan_type", "Unknown"),  # Dynamically fetch scan type
        "test_type": engagement_data.get("test_type"),  # Fetch actual test type ID if available
        "title": engagement_data.get("name", f"Test for Engagement {engagement_id}"),
        "description": description,  # User inputted description
        "target_start": engagement_data.get("target_start"),
        "target_end": engagement_data.get("target_end"),
        "lead": engagement_data.get("lead"),
        "environment": engagement_data.get("environment")
    }

    create_test_url = f"{DEFECTDOJO_ENGAGEMENTS_URL}{engagement_id}/tests/"
    response = requests.post(create_test_url, json=test_data, headers=HEADERS_DEFECTDOJO)

    if response.status_code == 201:
        log_message(f"✅ Test created successfully for Engagement {engagement_id}")
    else:
        log_message(f"❌ Failed to create test: {response.text}")

# Function to log messages
def log_message(message):
    log_text.insert(tk.END, message + "\n")
    log_text.see(tk.END)

# GUI Setup
root = tk.Tk()
root.title("DefectDojo Test Creator")
root.geometry("600x600")

# Label and Input for Engagement ID
tk.Label(root, text="Engagement ID:").pack(pady=5)
engagement_id_entry = tk.Entry(root, width=50)
engagement_id_entry.pack(pady=5)

# Label and Text Area for Description
tk.Label(root, text="Description (JIRA Issues):").pack(pady=5)
description_text = scrolledtext.ScrolledText(root, width=60, height=10)
description_text.pack(pady=5)

# Create Test Button
create_button = tk.Button(root, text="Create Test", command=create_test, bg="green", fg="white")
create_button.pack(pady=10)

# Log Area
tk.Label(root, text="Logs:").pack(pady=5)
log_text = scrolledtext.ScrolledText(root, width=60, height=10)
log_text.pack(pady=5)

# Run GUI
root.mainloop()