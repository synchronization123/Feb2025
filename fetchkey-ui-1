import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox, filedialog
import requests
import re
import time
import pandas as pd
from datetime import datetime, timedelta

# API Details
DEFECTDOJO_TESTS_URL = 'https://demo.defectdojo.org/api/v2/tests/'
DEFECTDOJO_ENGAGEMENTS_URL = 'https://demo.defectdojo.org/api/v2/engagements/'
HEADERS_DEFECTDOJO = {
    'Authorization': 'Token 123232323232323',  # Replace with your API token
    'Content-Type': 'application/json'
}

# Function to log messages inside the GUI
def log_message(log_widget, message):
    log_widget.insert(tk.END, message + "\n")
    log_widget.see(tk.END)

# Function to handle API requests with retries
def request_with_retry(url, method="GET", json=None, max_retries=3, delay=2):
    for attempt in range(max_retries):
        try:
            response = requests.request(method, url, headers=HEADERS_DEFECTDOJO, json=json)
            if response.status_code in [200, 201, 204]:
                return response
            else:
                return None
        except requests.exceptions.RequestException:
            time.sleep(delay)
    return None

# Fetch all tests under engagement (Handles Pagination)
def get_existing_tests(engagement_id):
    existing_tests = {}
    url = f"{DEFECTDOJO_TESTS_URL}?engagement={engagement_id}&limit=100"

    while url:
        response = request_with_retry(url)
        if not response:
            break

        data = response.json()
        for test in data.get("results", []):
            test_title = test.get("title", "").strip()
            test_id = test.get("id")
            if test_title and test_id:
                existing_tests[test_id] = test_title

        url = data.get("next")  # Pagination

    return existing_tests

# Fetch engagement details
def get_engagement_details(engagement_id):
    url = f"{DEFECTDOJO_ENGAGEMENTS_URL}{engagement_id}/"
    response = request_with_retry(url)
    return response.json() if response else None

# Fetch and display existing tests in Manage Tests tab
def fetch_tests():
    engagement_id = manage_engagement_entry.get().strip()
    if not engagement_id:
        messagebox.showwarning("Missing Input", "Enter Engagement ID.")
        return

    tests = get_existing_tests(engagement_id)
    test_list.delete(*test_list.get_children())

    if not tests:
        log_message(manage_log_text, f"‚ö†Ô∏è No tests found for engagement {engagement_id}.")
        return

    for test_id, test_title in tests.items():
        test_list.insert("", "end", values=(test_id, test_title))

    log_message(manage_log_text, f"‚úÖ Fetched {len(tests)} tests for engagement {engagement_id}.")

# Select all tests
def select_all_tests():
    for item in test_list.get_children():
        test_list.selection_add(item)

# Delete selected tests
def delete_tests():
    selected_items = test_list.selection()
    if not selected_items:
        messagebox.showwarning("No Selection", "Select tests to delete.")
        return

    for item in selected_items:
        test_id = test_list.item(item, "values")[0]
        url = f"{DEFECTDOJO_TESTS_URL}{test_id}/"
        response = request_with_retry(url, method="DELETE")

        if response and response.status_code == 204:
            log_message(manage_log_text, f"üóëÔ∏è Deleted Test ID {test_id}")
            test_list.delete(item)

# GUI Setup
root = tk.Tk()
root.title("DefectDojo Test Manager")
root.geometry("800x600")

notebook = ttk.Notebook(root)
tab_manage = ttk.Frame(notebook)

notebook.add(tab_manage, text="Manage Tests")
notebook.pack(expand=True, fill="both")

# Manage Tests Tab
ttk.Label(tab_manage, text="Engagement ID:").pack()
manage_engagement_entry = ttk.Entry(tab_manage, width=50)
manage_engagement_entry.pack()

ttk.Button(tab_manage, text="Fetch Tests", command=fetch_tests).pack()
test_list = ttk.Treeview(tab_manage, columns=("ID", "Title"), show="headings")
test_list.heading("ID", text="Test ID")
test_list.heading("Title", text="Test Title")
test_list.pack()

ttk.Button(tab_manage, text="Select All", command=select_all_tests).pack()
ttk.Button(tab_manage, text="Delete Selected", command=delete_tests).pack()

# Separate Console for Logs under Manage Tests
ttk.Label(tab_manage, text="Logs:").pack()
manage_log_text = scrolledtext.ScrolledText(tab_manage, width=80, height=10)
manage_log_text.pack()

root.mainloop()