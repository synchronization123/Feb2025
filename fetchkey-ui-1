import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox, filedialog
import requests
import re
import time
import pandas as pd
from datetime import datetime, timedelta

# API Details
DEFECTDOJO_TESTS_URL = 'https://demo.defectdojo.org/api/v2/tests/'
DEFECTDOJO_ENGAGEMENTS_URL = 'https://demo.defectdojo.org/api/v2/engagements/'
HEADERS_DEFECTDOJO = {
    'Authorization': 'Token 123232323232323',  # Replace with your API token
    'Content-Type': 'application/json'
}

# Function to log messages inside the GUI
def log_message(message):
    log_text.insert(tk.END, message + "\n")
    log_text.see(tk.END)

# Function to handle API requests with retries
def request_with_retry(url, method="GET", headers=None, json=None, max_retries=3, delay=2):
    """Handles API requests with retries to prevent failures"""
    for attempt in range(max_retries):
        try:
            response = requests.request(method, url, headers=headers, json=json)
            if response.status_code in [200, 201]:
                return response
            else:
                log_message(f"‚ùå Error {response.status_code}: {response.text}")
                break
        except requests.exceptions.RequestException as e:
            log_message(f"‚ùå Network error: {str(e)}. Retrying in {delay} sec...")
            time.sleep(delay)
    return None

# Function to fetch all existing tests for an engagement
def get_existing_tests(engagement_id):
    existing_tests = {}
    url = f"{DEFECTDOJO_TESTS_URL}?engagement={engagement_id}&limit=100"

    while url:
        response = request_with_retry(url, "GET", headers=HEADERS_DEFECTDOJO)
        if not response:
            break

        data = response.json()
        results = data.get("results", [])

        for test in results:
            test_id = test.get("id")
            test_title = test.get("title", "").strip()
            if test_title and test_id:
                existing_tests[test_title.lower()] = test_id

        url = data.get("next")  # Handle pagination

    return existing_tests

# Function to extract JIRA issue keys
def get_jira_issue_keys_from_description(description):
    pattern = r'\b[a-zA-Z]+-\d+\b'
    return list(set([key.upper() for key in re.findall(pattern, description)]))

# Function to fetch engagement details
def get_engagement_details(engagement_id):
    url = f"{DEFECTDOJO_ENGAGEMENTS_URL}{engagement_id}/"
    response = request_with_retry(url, "GET", headers=HEADERS_DEFECTDOJO)
    return response.json() if response else None

# Function to create tests dynamically and export to Excel
def create_tests():
    engagement_id = engagement_id_entry.get().strip()
    description = description_text.get("1.0", tk.END).strip()

    if not engagement_id or not description:
        messagebox.showwarning("Missing Input", "Please enter Engagement ID and Description.")
        return

    engagement_details = get_engagement_details(engagement_id)
    if not engagement_details:
        log_message(f"‚ùå Failed to fetch details for engagement {engagement_id}.")
        return

    if engagement_details.get("status", "").lower() == "completed":
        log_message(f"‚ö†Ô∏è Engagement {engagement_id} is completed. Skipping test creation.")
        return

    issue_keys = get_jira_issue_keys_from_description(description)
    if not issue_keys:
        log_message(f"‚ö†Ô∏è No valid JIRA issues found for engagement {engagement_id}. Skipping.")
        return

    existing_tests = get_existing_tests(engagement_id)
    created_tests = []

    lead = engagement_details.get("lead", 1)
    target_start = engagement_details.get("target_start", datetime.now().strftime("%Y-%m-%d"))
    target_end = engagement_details.get("target_end", (datetime.now() + timedelta(days=7)).strftime("%Y-%m-%d"))

    for issue_key in issue_keys:
        if issue_key.lower() in existing_tests:
            log_message(f"‚ö†Ô∏è Test '{issue_key}' already exists for engagement {engagement_id}. Skipping.")
            continue

        payload = {
            "engagement": engagement_id,
            "title": issue_key,
            "description": "",
            "test_type": engagement_details.get("test_type"),
            "scan_type": engagement_details.get("scan_type", "Unknown"),
            "environment": engagement_details.get("environment", 1),
            "lead": lead,
            "target_start": target_start,
            "target_end": target_end
        }

        response = request_with_retry(DEFECTDOJO_TESTS_URL, "POST", headers=HEADERS_DEFECTDOJO, json=payload)

        if response and response.status_code == 201:
            test_id = response.json().get("id")
            created_tests.append((issue_key, test_id))
            log_message(f"‚úÖ Created test '{issue_key}' with ID {test_id}.")

    if created_tests:
        df = pd.DataFrame(created_tests, columns=["JIRA Issue", "Test ID"])
        file_path = filedialog.asksaveasfilename(defaultextension=".xlsx", filetypes=[("Excel files", "*.xlsx")])
        if file_path:
            df.to_excel(file_path, index=False)
            log_message(f"üìÇ Tests saved to {file_path}")

# Function to fetch & display existing tests with checkboxes
def fetch_tests_for_engagement():
    engagement_id = engagement_id_entry_tests.get().strip()
    if not engagement_id:
        messagebox.showwarning("Missing Input", "Please enter an Engagement ID.")
        return

    test_listbox.delete(*test_listbox.get_children())  # Clear previous results
    existing_tests = get_existing_tests(engagement_id)

    for title, test_id in existing_tests.items():
        test_listbox.insert("", "end", values=(title, test_id))

# Function to delete selected tests
def delete_selected_tests():
    engagement_id = engagement_id_entry_tests.get().strip()
    selected_items = test_listbox.selection()
    
    if not engagement_id or not selected_items:
        messagebox.showwarning("Missing Selection", "Please select at least one test to delete.")
        return

    for item in selected_items:
        test_id = test_listbox.item(item, "values")[1]
        url = f"{DEFECTDOJO_TESTS_URL}{test_id}/"
        response = request_with_retry(url, "DELETE", headers=HEADERS_DEFECTDOJO)
        
        if response and response.status_code == 204:
            log_message(f"‚úÖ Deleted test ID {test_id}.")
            test_listbox.delete(item)  # Remove from UI

# GUI Setup with Tabs
root = tk.Tk()
root.title("DefectDojo Test Manager")
root.geometry("700x600")

tab_control = ttk.Notebook(root)

# Tab 1: Create Tests
tab_create = ttk.Frame(tab_control)
tab_control.add(tab_create, text="Create Tests")

tk.Label(tab_create, text="Engagement ID:").pack(pady=5)
engagement_id_entry = tk.Entry(tab_create, width=50)
engagement_id_entry.pack(pady=5)

tk.Label(tab_create, text="Description (JIRA Issues):").pack(pady=5)
description_text = scrolledtext.ScrolledText(tab_create, width=60, height=10)
description_text.pack(pady=5)

create_button = tk.Button(tab_create, text="Create Tests", command=create_tests, bg="green", fg="white")
create_button.pack(pady=10)

log_text = scrolledtext.ScrolledText(tab_create, width=60, height=10)
log_text.pack(pady=5)

# Tab 2: Manage Tests
tab_manage = ttk.Frame(tab_control)
tab_control.add(tab_manage, text="Manage Tests")

tk.Label(tab_manage, text="Engagement ID:").pack(pady=5)
engagement_id_entry_tests = tk.Entry(tab_manage, width=50)
engagement_id_entry_tests.pack(pady=5)

fetch_button = tk.Button(tab_manage, text="Fetch Tests", command=fetch_tests_for_engagement)
fetch_button.pack(pady=5)

test_listbox = ttk.Treeview(tab_manage, columns=("Title", "Test ID"), show="headings")
test_listbox.heading("Title", text="Test Title")
test_listbox.heading("Test ID", text="Test ID")
test_listbox.pack(pady=5, fill="both", expand=True)

delete_button = tk.Button(tab_manage, text="Delete Selected", command=delete_selected_tests, bg="red", fg="white")
delete_button.pack(pady=5)

tab_control.pack(expand=1, fill="both")
root.mainloop()